#!/usr/bin/env bash

# Utility functions used by all of the BASH scripts in this repo.

# ----------------------------------------------------------------------------
# environment configuration

load_environment_variables() {
  local binpath=`bin_path`
  eval `$binpath/gen_env`
}

load_util_local() {
  local util_local=`script_path`/util_local
  [ -f $util_local ] && source $util_local
  return 0
}

# ----------------------------------------------------------------------------
# text utilities

shopt -s expand_aliases       # expand aliases in non-interactive shell

alias textblock="read -d ''"   # for multi-line text blocks

remove_blank_lines() {
  echo -e $1 | sed '/^$/d'
}

timestamp() {
  date +"%y%m%d-%H%M%S"
}

is_array() {
  local variable_name=$1
  [[ "$(declare -p $variable_name)" =~ "declare -a" ]]
}

includes_item() {
  local list=$1                      # space-separated list of keywords
  local tgt=$2                       # single target keyword
  for item in $list; do
    [[ $item == $tgt ]] && return 0  # return 0 if target is found
  done
  return 1                           # return 1 if target is not found
}

excludes_item() {
  includes_item "$1" $2
  [ "$?" -eq 0 ] && return 1 || return 0
}

# ----------------------------------------------------------------------------
# script and path names 

script_name() {
  basename "$0"
}

script_path() {
  cd `dirname $0`
  echo ${script_path_var:-`pwd`}
}

bin_path() {
  cd `dirname $BASH_SOURCE`
  echo ${bin_path_var:-`pwd`}
}

base_path() {
  cd `bin_path`
  cd ..
  pwd
}

script_parent_dir() {
  basename `script_path`
}

script_full_name() {
  local str=`script_parent_dir`/`script_name` 
  echo $str
}

# ----------------------------------------------------------------------------
# console output 

play_alert_sound() {
  [ `which alert` ] && alert
}

print_divider() {
  echo "---------------------------------------------------------------------"
}

print_header() {
  print_divider
  echo "`date` - `script_full_name`"
}

msg() {
  echo "> $1..."
  [ -n "$2" ] && [ -f "$2" ] && echo "> $1" >> $2
  return 0
}

batlog() {
  echo "> $1" >> /tmp/bat.log
}

raise() {
  echo -e "ERROR: $1"
  exit 1
}

wrap_up() {
  print_divider
  play_alert_sound
  local finish_seconds=$(date +"%s")
  local finish_date=$(date +"%T")
  local diff=$(($finish_seconds-$start_seconds))
  local time="$(($diff / 60))M.$(($diff % 60))S"
  local status_code=$1
  [ -n "$status_code" ] || raise "no status code"
  echo "`script_full_name` finished with status $status_code | elapsed time $time"
  echo "started $start_date | finished $finish_date"
  sudo sync
  [ "$status_code" == "0" ] && [ -n "$2" ] && echo "NEXT STEP: $2"
  exit $status_code
}

# ----------------------------------------------------------------------------
# networking functions

can_ping() {
  local host=$1
  ping -c1 $host > /dev/null 2>&1
}

can_not_ping() {
  ! can_ping $1
}

can_ssh() {
  local host=$1
  ssh -q $host exit > /dev/null 2>&1
}

can_not_ssh() {
  ! can_ssh $1
}

is_listening_on() {
  local host=$1
  local port=$2
  nc -z $host $port
}

local_ip_address() {
  [ -n $network_interface ] || raise "network_interface not defined"
  ifconfig $network_interface | grep 'inet addr' | awk '{print $2}' | sed -s 's/addr://' | grep .
}

# ----------------------------------------------------------------------------
# ssh management

scrub_ssh_known_hosts() {
  ssh-keygen -f "/home/$env_username/.ssh/known_hosts" -R $rpi_hostname > /dev/null 2>&1
}

display_ssh_config_tip() {
  if [ ! `grep $rpi_hostname /home/$env_username/.ssh/config` ]; then
    print_divider
    echo "ProTip: get rid of ssh 'known_host' validation warnings."
    echo "Add these lines into /home/$env_username/.ssh/config..."
    echo "    Host: $rpi_hostname"
    echo "      StringHostKeyChecking=no"
    print_divider
  fi
}

# ----------------------------------------------------------------------------
# tmux

is_live_dashboard() {
  dashboard=$1
  tmux ls | grep $dashboard > /dev/null
}

is_no_live_dashboard() {
  ! is_live_dashboard $1
}

create_tmux_dashboard() {
  dashboard=$1
  tmux new-session   -s $dashboard -d
  tmux split-window  -t $dashboard:1   -v                            # vertical split
  tmux split-window  -t $dashboard:1.2 -v                            # vertical split
  tmux select-layout -t $dashboard:1 even-vertical                   # even layout
}

tmux_send_keys() {
  dashboard=$1
  pane=$2
  cmd=$3
  tmux send-keys -t $dashboard:1.$pane "$cmd" C-m
}

# ----------------------------------------------------------------------------
# process management

pid_is_live() {
  local pidfile=$1
  ps aux | grep -v grep | grep `cat $pidfile` > /dev/null
}

pid_is_not_live() {
  ! pid_is_live $1
}

kill_pidfile() {
  local pidfile=$1
  [ -f $pidfile ] && kill `cat $pidfile` > /dev/null 2>&1 && sleep 1
}

set_pidfile() {
  local pidfile=$1
  local pid=$2
  echo $pid > $pidfile
}

use_pidfile() {
  local pidfile=$1
  kill_pidfile $pidfile
  set_pidfile  $pidfile $$
}

# ----------------------------------------------------------------------------
# file utilities

backup_file() {
  local ts=`timestamp`
  sudo cp $1 $1.backup_$ts
}

stop_ondeck_backup() {
  if ps aux | grep -q '[o]ndeck' ; then
    msg "Kill active ondeck backup process"
    sudo kill $(ps aux | grep '[o]ndeck' | awk '{print $2}')
  fi
}

create_ondeck_backup() {
  msg "Start process to create new ondeck backup"
  sudo rm -r $erpi_ondeck
  sudo mkdir -p $erpi_ondeck
  sudo nohup cp -a $erpi_master_root $erpi_ondeck_root > /dev/null 2>&1 &  
}

validate_export_directories() {
  local dirs=`sudo du -s --time /export/raspbian/*/*`
  msg "Export Directory Stats"
  echo "$dirs"
  master_size=`echo "$dirs" | grep master | grep root | awk '{print $1}'`
  active_size=`echo "$dirs" | grep active | grep root | awk '{print $1}'`
  local diff=`echo $(($master_size-$active_size)) | tr -d -`
  errmsg="size mismatch - master:$master_size | active:$active_size - rerun cmd"
  [ "$diff" -gt "10000" ] && raise "$errmsg"
}

# ----------------------------------------------------------------------------
# execution

script_path_var=$(script_path)
bin_path_var=$(bin_path)
start_seconds=$(date +"%s")
start_date=$(date +"%T")

load_util_local
load_environment_variables
print_header

cd $(base_path)
